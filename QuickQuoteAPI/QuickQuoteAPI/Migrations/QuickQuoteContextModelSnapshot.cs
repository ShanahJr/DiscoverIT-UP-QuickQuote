// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickQuoteAPI.Models;

namespace QuickQuoteAPI.Migrations
{
    [DbContext(typeof(QuickQuoteContext))]
    partial class QuickQuoteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuickQuoteAPI.Models.Applicance", b =>
                {
                    b.Property<int>("ApplicanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplianceDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("AppliancePrice")
                        .HasColumnType("money");

                    b.Property<int>("ApplianceYear")
                        .HasColumnType("int");

                    b.Property<string>("ApplicanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuoteID")
                        .HasColumnType("int");

                    b.HasKey("ApplicanceID");

                    b.HasIndex("QuoteID");

                    b.ToTable("Applicance");
                });

            modelBuilder.Entity("QuickQuoteAPI.Models.Quote", b =>
                {
                    b.Property<int>("QuoteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("QuoteID");

                    b.HasIndex("UserID");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("QuickQuoteAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("UserCellNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UserMonthlyPremium")
                        .HasColumnType("money");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRiskFactor")
                        .HasColumnType("int");

                    b.Property<string>("UserSuburb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSurname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QuickQuoteAPI.Models.Applicance", b =>
                {
                    b.HasOne("QuickQuoteAPI.Models.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuickQuoteAPI.Models.Quote", b =>
                {
                    b.HasOne("QuickQuoteAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
